---
openapi: 3.0.0

info:
  description: |
    ## About this documentation

    This is an unofficial documentation of the API that is used in the project [https://sensor.community](https://sensor.community).

    The source code of this documentation is at [https://github.com/bessarabov/api.sensor.community](https://github.com/bessarabov/api.sensor.community). Feel free to create Pull Request with bug fixes or improvements.

    Maybe, someday this API documentation will be adopted as official and it will be shown at [https://api.sensor.community](https://api.sensor.community) and the source code will be moved to [https://github.com/opendata-stuttgart](https://github.com/opendata-stuttgart). But for now this is unofficial documentation.

    This documentation is created with openapi/swagger. It is interactive. For some endpoints you can send requests and see the responses directly on this page.

    ## Official documentation

    Now there are several official places with official documentation:

     * [https://github.com/opendata-stuttgart/meta/wiki/EN-APIs](https://github.com/opendata-stuttgart/meta/wiki/EN-APIs)
     * [https://github.com/opendata-stuttgart/meta/wiki/APIs](https://github.com/opendata-stuttgart/meta/wiki/APIs) — in German language
     * [https://api.sensor.community/v1/](https://api.sensor.community/v1/)

    ## Terminology

     * measurement station — device that measure data. Sometimes it is called "node". There may be multiple sensors in one measurement station (e.g. PM and temperature/humidity).
     * sensor — element of the measurement station that does the measurements. Sensor often measure several difrent values. For example particulate matter sensor SDS011 measure two values: PM2.5 and PM10. One more example: sensor BME280 measures temperature, humidity and pressure.

    In this API there are a lot of difrent IDs. There is a huge problem with the naming of IDs. In difrent parts of sensor.community the same things are named differently and the difrent things are named the same way. Here is an unofficial attempt to name all that things:

     * `StationNumber` — (example `37831`) this is just a number. It is created by sensor.community when you register your measurement station at [https://devices.sensor.community/](https://devices.sensor.community/) This number is incremental. One person register new station — get StationNumber = 37831, the next person register new station — get StationNumber = 37832.
     * `StationUniqID` — (example `esp8266-123456789` or `raspi-3b4838fa`). Sometimes it is called `ChipID` and on the site [https://devices.sensor.community/sensors](https://devices.sensor.community/sensors) is called `Sensor UID`
     * `SensorID` (example `44700`) — This is the ID that you see on the map [https://sensor.community](https://sensor.community)

    Here is an example. There can be a measurement station with StationNumber = 37831, StationUniqID = esp8266-123456789 that has connected two sensors:

      * SensorID = 44700 that measures PM2.5 & PM10
      * SensorID = 44701 that measures temperature, humidity and pressure

    ## Measurements data object

    Many endpoints return measurements data. It is a JSON object, here is an example:

    ```
    {
      "id": 6489703325,
      "timestamp": "2021-08-14 16:09:32",
      "sampling_rate": null,
      "sensor": {
        "id": 489,
        "sensor_type": {
          "id": 14,
          "name": "SDS011",
          "manufacturer": "Nova Fitness"
        },
        "pin": "1"
      },
      "sensordatavalues": [
        {
          "id": 14216406071,
          "value_type": "P1",
          "value": "11.53"
        },
        {
          "id": 14216406074,
          "value_type": "P2",
          "value": "8.70"
        }
      ],
      "location": {
        "longitude": "11.576",
        "latitude": "48.12",
        "id": 231,
        "country": "DE",
        "indoor": 0,
        "exact_location": 0,
        "altitude": "516.9"
      }
    }
    ```

    * `id` — MeasurementID, this ID you get after POST-ing data to endpoint `/v1/push-sensor-data/`
    * `timestamp` is in UTC
    * `sampling_rate` — there are vey few measurement station that send data to this field, it is usually `null`
    * `sensor.id` — SensorID
    * `sensor.sensor_type` — 14 for SDS011, 17 for BME280 and a lot of other options (Where to get the full list UNKNOWN FIXME)
    * `sensor.pin` — this is the value that was sent in header `X-Pin` to enpoint `/v1/push-sensor-data/`
    * `sensordatavalues.id` — MeasurementValueID
    * `sensordatavalues.value_type` — P1 for PM10, PM2 for PM2.5 and a lot of other options (Where to get the full list UNKNOWN FIXME)
    * `location.id` — UNKNOWN FIXME

tags:
  - name: data
    description: Enpoints that are working on the server https://data.sensor.community

  - name: api
    description: Enpoints that are working on the server https://api.sensor.community

  - name: archive
    description: Enpoints that are working on the server https://archive.sensor.community

paths:

  "/airrohr/v1/sensor/{SensorID}/":
    get:

      servers:
        - url: https://data.sensor.community

      summary: Get info from one sensor for the last 5 minutes
      description: |
        With this endpoint you get get all the measures of the last 5 minutes for the the specific sensor. You can find sensor ID with the map [https://sensor.community](https://sensor.community).Usually there are 2 measures in the endpoint response.

        Don't forget to specify the slash (`/`) after sensor ID, without it the endpoint will return 404.

        The source code of this enpoint is avaliable at GitHub repo — UNKNOWN FIXME

        The response is the JSON array with zero or more JSON sensor data objects.

      tags:
        - data

      parameters:
      - description: Sensor ID
        in: path
        name: SensorID
        required: true
        example: 489
        type: integer
      responses:
        '200':
          description: successful operation

  "/static/v1/data.json":
    get:

      servers:
        - url: https://data.sensor.community

      summary: Get info from all the sensors for the last 5 minutes
      description: |
        Warning! This endpoint return much data, tens of megabytes.

        The source code of this enpoint is avaliable at GitHub repo — UNKNOWN FIXME

        This endpoint is not working in this interactive documentation, so here is curl:

        ```
        curl https://data.sensor.community/static/v1/data.json
        ```

      tags:
        - data

  "/static/v2/data.json":
    get:

      servers:
        - url: https://data.sensor.community

      summary: Get average of all measurements per sensor of the last 5 minutes for all sensors
      description: |
        Warning! This endpoint return much data, tens of megabytes.

        This endpoint is not working in this interactive documentation, so here is curl:

        ```
        curl https://data.sensor.community/static/v2/data.json
        ```
      tags:
        - data

  "/static/v2/data.1h.json":
    get:

      servers:
        - url: https://data.sensor.community

      summary: Get average of all measurements per sensor of the last hour
      description: |
        Warning! This endpoint return much data, tens of megabytes.

        This endpoint is not working in this interactive documentation, so here is curl:

        ```
        curl https://data.sensor.community/static/v2/data.1h.json
        ```

      tags:
        - data

  "/static/v2/data.24h.json":
    get:

      servers:
        - url: https://data.sensor.community

      summary: Get average of all measurements per sensor of the 24 hours
      description: |
        Warning! This endpoint return much data, tens of megabytes.

        This endpoint is not working in this interactive documentation, so here is curl:

        ```
        curl https://data.sensor.community/static/v2/data.24h.json
        ```
      tags:
        - data

  "/":
    get:

      servers:
        - url: https://archive.sensor.community

      summary: Get archive of measurements
      description: |
        Open in your browser [https://archive.sensor.community/](https://archive.sensor.community/).

      tags:
        - archive

  "/v1/push-sensor-data/":
    post:

      servers:
        - url: https://api.sensor.community

      summary: Send data to sensors.community
      description: |

        This enpoint is used to send sensor data to sensor.community.

        Source code of this API is avaliable at [https://github.com/opendata-stuttgart/feinstaub-api](https://github.com/opendata-stuttgart/feinstaub-api)

      tags:
        - api

      parameters:
        - name: "X-Sensor"
          in: "header"
          required: true
          type: "string"
          description: This header should contain information with StationUniqID
          example: esp8266-123456789
        - name: "X-Pin"
          in: "header"
          required: true
          type: "integer"
          description: This header should contain number that describes the type of the sensor. It is `1` for SDS011, `11` for BME280 and there are other possible numbers (Where to get the full list UNKNOWN FIXME)
          example: 1
        - in: "body"
          name: "body"
          required: true
          description: Data with the measurements
